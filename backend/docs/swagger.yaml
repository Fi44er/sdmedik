basePath: /api/v1/
definitions:
  dto.AddBasketItem:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.ChangeOrderStatus:
    properties:
      order_id:
        type: string
      status:
        type: string
    type: object
  dto.CreateBasket:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  dto.CreateCondition:
    properties:
      type:
        $ref: '#/definitions/model.ConditionType'
      value:
        type: string
    required:
    - type
    - value
    type: object
  dto.CreateOrder:
    properties:
      email:
        type: string
      fio:
        type: string
      phone_number:
        type: string
    type: object
  dto.CreatePromotion:
    properties:
      condition:
        $ref: '#/definitions/dto.CreateCondition'
      description:
        type: string
      end_date:
        type: string
      get_product_id:
        type: string
      name:
        type: string
      reward:
        $ref: '#/definitions/dto.CreateReward'
      start_date:
        type: string
      target_id:
        type: string
      type:
        $ref: '#/definitions/model.PromotionType'
    required:
    - end_date
    - name
    - start_date
    - target_id
    - type
    type: object
  dto.CreateReward:
    properties:
      type:
        $ref: '#/definitions/model.RewardType'
      value:
        type: number
    required:
    - type
    - value
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.Register:
    properties:
      email:
        type: string
      fio:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - email
    - fio
    - password
    - phone_number
    type: object
  dto.SendCode:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.UpdateUser:
    properties:
      email:
        type: string
      fio:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  dto.VerifyCode:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  model.ConditionType:
    enum:
    - min_quantity
    - buy_n
    - get_m
    type: string
    x-enum-comments:
      ConditionTypeBuyN: Купи N товаров
      ConditionTypeGetM: Получи M товаров
      ConditionTypeMinQuantity: Минимальное количество товаров
    x-enum-varnames:
    - ConditionTypeMinQuantity
    - ConditionTypeBuyN
    - ConditionTypeGetM
  model.PromotionType:
    enum:
    - product_discount
    - category_discount
    - buy_n_get_m
    type: string
    x-enum-comments:
      PromotionTypeBuyNGetM: Купи N, получи M
      PromotionTypeCategoryDiscount: Скидка на категорию
      PromotionTypeProductDiscount: Скидка на товар
    x-enum-varnames:
    - PromotionTypeProductDiscount
    - PromotionTypeCategoryDiscount
    - PromotionTypeBuyNGetM
  model.RewardType:
    enum:
    - percentage
    - fixed
    - product
    type: string
    x-enum-comments:
      RewardTypeFixed: Фиксированная скидка
      RewardTypePercentage: Скидка в процентах
      RewardTypeProduct: Бесплатный товар
    x-enum-varnames:
    - RewardTypePercentage
    - RewardTypeFixed
    - RewardTypeProduct
  response.Response:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ResponseData:
    properties:
      data: {}
      status:
        type: string
    type: object
  response.ResponseListData:
    properties:
      data:
        items: {}
        type: array
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Swagger docs from sdmedik backend
  title: sdmedik API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns access and refresh tokens
      parameters:
      - description: User  login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by clearing the access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using the provided refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Successful refresh response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided data
      parameters:
      - description: User Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      produces:
      - application/json
      responses:
        "200":
          description: Successful registration response
          schema:
            $ref: '#/definitions/response.Response'
      summary: User registration
      tags:
      - auth
  /auth/send-code:
    post:
      consumes:
      - application/json
      description: Sends a verification code to the provided email address
      parameters:
      - description: User email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SendCode'
      produces:
      - application/json
      responses:
        "200":
          description: Successful code sending response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send verification code
      tags:
      - auth
  /auth/verify-code:
    post:
      consumes:
      - application/json
      description: Verifies the code sent to the user's email
      parameters:
      - description: User verification code
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyCode'
      produces:
      - application/json
      responses:
        "200":
          description: Successful verification response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify the provided code
      tags:
      - auth
  /basket:
    get:
      consumes:
      - application/json
      description: Get basket
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get basket
      tags:
      - basket
    post:
      consumes:
      - application/json
      description: Add item to basket
      parameters:
      - description: Basket item data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/dto.AddBasketItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add item to basket
      tags:
      - basket
  /basket/{id}:
    delete:
      consumes:
      - application/json
      description: Delete item from basket
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete item from basket
      tags:
      - basket
  /basket/create:
    post:
      consumes:
      - application/json
      description: Create a new basket
      parameters:
      - description: Basket data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBasket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new basket
      tags:
      - basket
  /category:
    get:
      consumes:
      - application/json
      description: Gets all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseListData'
      summary: Get all categories
      tags:
      - category
    post:
      consumes:
      - multipart/form-data
      description: |-
        Creates a new category with metadata (JSON) and a file (image)
        Example JSON:
        ```
        {
        "name": "category #1",
        "characteristics": [
        {
        "data_type": "string",
        "name": "characteristic #1"
        },
        {
        "data_type": "int",
        "name": "characteristic #2"
        }
        ]
        }
      parameters:
      - description: Category metadata as JSON
        in: formData
        name: json
        required: true
        type: string
      - description: Category image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create a new category
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete a category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Gets a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a category by ID
      tags:
      - category
  /order:
    get:
      consumes:
      - application/json
      description: Get all orders
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get all orders
      tags:
      - order
    post:
      consumes:
      - application/json
      description: Creates a new order
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create order
      tags:
      - order
  /order/{id}:
    post:
      consumes:
      - application/json
      description: Creates a new order
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create order
      tags:
      - order
  /order/my:
    get:
      consumes:
      - application/json
      description: Get my orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get my orders
      tags:
      - order
  /order/status:
    put:
      consumes:
      - application/json
      description: Update order status
      parameters:
      - description: Order status data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeOrderStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update order status
      tags:
      - order
  /product:
    get:
      consumes:
      - application/json
      description: Gets a product
      parameters:
      - description: Product ID
        in: query
        name: id
        type: string
      - description: Product article
        in: query
        name: article
        type: string
      - description: Product name
        in: query
        name: name
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Region ISO
        in: query
        name: iso
        type: string
      - description: Minimal
        in: query
        name: minimal
        type: boolean
      - description: Filters in JSON format
        example: '{"price":{"min":20,"max":100},"characteristics":[{"characteristic_id":1,"values":["string"]}]}'
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a product
      tags:
      - product
    post:
      consumes:
      - multipart/form-data
      description: |-
        Creates a new product with metadata (JSON) and multiple files.
        Example JSON:
        ```
        {
        "article": "123-123-124",
        "category_ids": [
        2
        ],
        "characteristic_values": [
        {
        "characteristic_id": 3,
        "value": "12"
        }
        ],
        "description": "description #1",
        "name": "product #1",
        "price": 123.12
        }
        ```
      parameters:
      - description: Product metadata as JSON
        in: formData
        name: json
        required: true
        type: string
      - collectionFormat: csv
        description: Product images (multiple files)
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create a new product
      tags:
      - product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete a product
      tags:
      - product
    put:
      consumes:
      - multipart/form-data
      description: |-
        Updates a product with metadata (JSON) and multiple files
        Example JSON:
        ```
        {
        "name": "test update",
        "price": 123.12,
        "description": "test update",
        "category_ids": [
        2
        ],
        "characteristic_values": [
        {
        "characteristic_id": 2,
        "value": "string"
        },
        {
        "characteristic_id": 3,
        "value": "12"
        }
        ],
        "del_images": [
        {
        "id": "8832ed62-0a19-40e2-81b3-4c971884e962",
        "name": "cb44cbb3-aaf9-47a4-867c-f81dbc0485ab.jpg"
        }
        ]
        }
        ```
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product metadata as JSON
        in: formData
        name: json
        required: true
        type: string
      - collectionFormat: csv
        description: Product images (multiple files)
        in: formData
        items:
          type: file
        name: files
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Update a product
      tags:
      - product
  /product/filter/{category_id}:
    get:
      consumes:
      - application/json
      description: Get a product filter
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a product
      tags:
      - product
  /product/top/{limit}:
    get:
      consumes:
      - application/json
      description: Gets top products
      parameters:
      - description: Limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get top products
      tags:
      - product
  /promotion:
    get:
      description: Get all promotions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all promotions
      tags:
      - promotion
    post:
      consumes:
      - application/json
      description: Creates a new promotion
      parameters:
      - description: Promotion data
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePromotion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new promotion
      tags:
      - promotion
  /promotion/{id}:
    delete:
      description: Delete a promotion
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a promotion
      tags:
      - promotion
  /search:
    get:
      consumes:
      - application/json
      description: Search products
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Search products
      tags:
      - search
  /user:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all users
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
      tags:
      - user
  /user/me:
    get:
      consumes:
      - application/json
      description: Get my user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get my user
      tags:
      - user
  /webscraper:
    get:
      consumes:
      - application/json
      description: Scraper
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Scraper
      tags:
      - webscraper
swagger: "2.0"
