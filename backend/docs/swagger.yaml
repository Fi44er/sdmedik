basePath: /api/
definitions:
  dto.UserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      patronymic:
        type: string
      phone_number:
        type: string
      surname:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      patronymic:
        type: string
      phone_number:
        type: string
      role:
        items:
          type: string
        type: array
      surname:
        type: string
    type: object
  response.Response:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ResponseData:
    properties:
      data: {}
      status:
        example: success
        type: string
    type: object
  response.ResponseListData:
    properties:
      data:
        items: {}
        type: array
      status:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: Swagger docs from sdmedik backend
  title: sdmedik API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseListData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get my user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get my user
      tags:
      - users
swagger: "2.0"
