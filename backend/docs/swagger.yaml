basePath: /api/v1/
definitions:
  dto.CreateCategory:
    properties:
      characteristics:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateProduct:
    properties:
      category_ids:
        items:
          type: integer
        type: array
      description:
        type: string
      name:
        type: string
    required:
    - category_ids
    - description
    - name
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.Register:
    properties:
      email:
        type: string
      fio:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - email
    - fio
    - password
    - phone_number
    type: object
  dto.SendCode:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.VerifyCode:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  model.Category:
    properties:
      characteristic:
        items:
          $ref: '#/definitions/model.Characteristic'
        type: array
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
    type: object
  model.Characteristic:
    properties:
      category_id:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  model.CharacteristicValue:
    properties:
      characteristic_id:
        type: integer
      id:
        type: integer
      product_id:
        type: string
      value:
        type: string
    type: object
  model.Image:
    properties:
      id:
        type: string
      name:
        type: string
      product_id:
        type: string
    type: object
  model.Price:
    properties:
      id:
        type: string
      price:
        type: number
      product_id:
        type: string
      region_id:
        type: string
    type: object
  model.Product:
    properties:
      article:
        type: string
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      characteristic_values:
        items:
          $ref: '#/definitions/model.CharacteristicValue'
        type: array
      description:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      name:
        type: string
      prices:
        description: Связь с ценами
        items:
          $ref: '#/definitions/model.Price'
        type: array
    type: object
  response.Response:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ResponseData:
    properties:
      data: {}
      status:
        type: string
    type: object
  response.ResponseListData:
    properties:
      data:
        items: {}
        type: array
      status:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: Swagger docs from sdmedik backend
  title: sdmedik API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns access and refresh tokens
      parameters:
      - description: User  login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by clearing the access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using the provided refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Successful refresh response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided data
      parameters:
      - description: User Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      produces:
      - application/json
      responses:
        "200":
          description: Successful registration response
          schema:
            $ref: '#/definitions/response.Response'
      summary: User registration
      tags:
      - auth
  /auth/send-code:
    post:
      consumes:
      - application/json
      description: Sends a verification code to the provided email address
      parameters:
      - description: User email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SendCode'
      produces:
      - application/json
      responses:
        "200":
          description: Successful code sending response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send verification code
      tags:
      - auth
  /auth/verify-code:
    post:
      consumes:
      - application/json
      description: Verifies the code sent to the user's email
      parameters:
      - description: User verification code
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyCode'
      produces:
      - application/json
      responses:
        "200":
          description: Successful verification response
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify the provided code
      tags:
      - auth
  /category:
    get:
      consumes:
      - application/json
      description: Gets all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseListData'
      summary: Get all categories
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Creates a new category
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create a new category
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete a category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Gets a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a category by ID
      tags:
      - category
  /product:
    get:
      consumes:
      - application/json
      description: Gets all products
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseListData'
      summary: Get all products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Create a new product
      tags:
      - product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Delete a product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Gets a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Get a product by ID
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Updates a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseData'
      summary: Update a product
      tags:
      - product
swagger: "2.0"
