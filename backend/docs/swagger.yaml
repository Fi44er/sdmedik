basePath: /api/
definitions:
  dto.CategoryResponse:
    properties:
      id:
        type: string
      image_ids:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
      user_agent:
        type: string
    required:
    - email
    - password
    type: object
  dto.ProductResponse:
    properties:
      article:
        type: string
      description:
        type: string
      id:
        type: string
      image_ids:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
    type: object
  dto.RegisterDTO:
    properties:
      email:
        type: string
      fio:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - email
    - fio
    - password
    - phone_number
    type: object
  dto.SendCodeDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      fio:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - fio
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      fio:
        type: string
      id:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
  dto.VerifyCodeDTO:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  response.Response:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ResponseData:
    properties:
      data: {}
      status:
        example: success
        type: string
    type: object
  response.ResponseListData:
    properties:
      data:
        items: {}
        type: array
      status:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: Swagger docs from sdmedik backend
  title: sdmedik API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns access and refresh tokens
      parameters:
      - description: User  login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by clearing the access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using the provided refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided data
      parameters:
      - description: User Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User registration
      tags:
      - auth
  /auth/send-code:
    post:
      consumes:
      - application/json
      description: Sends a verification code to the provided email address
      parameters:
      - description: User email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SendCodeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send verification code
      tags:
      - auth
  /auth/verify-code:
    post:
      consumes:
      - application/json
      description: Verifies the code sent to the user's email
      parameters:
      - description: User verification code
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyCodeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify the provided code
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CategoryResponse'
                  type: array
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - multipart/form-data
      description: Creates a new category with characteristics and images
      parameters:
      - description: Category data in JSON format
        in: formData
        name: category
        required: true
        type: string
      - description: Category images (can be multiple)
        in: formData
        name: files
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    get:
      consumes:
      - application/json
      description: Get category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.CategoryResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get category by ID
      tags:
      - categories
  /products:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Create product
      parameters:
      - description: A JSON object with product information (as a string)
        in: formData
        name: product
        required: true
        type: string
      - description: Image files for the product (multiple possible)
        in: formData
        name: files
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create product
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get product by ID
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseListData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get my user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseData'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "500":
          description: Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get my user
      tags:
      - users
swagger: "2.0"
